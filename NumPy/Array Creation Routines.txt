https://numpy.org/doc/stable/reference/generated/numpy.ones.html 


	numpy.arange
numpy.arange([start, ]stop, [step, ]dtype=None, *, like=None)

np.arange(3)
array([0, 1, 2])
np.arange(3.0)
array([ 0.,  1.,  2.])
np.arange(3,7)
array([3, 4, 5, 6])
np.arange(3,7,2)
array([3, 5]


	numpy.zeros
numpy.zeros(shape, dtype=float, order='C', *, like=None)

np.zeros(5)
array([ 0.,  0.,  0.,  0.,  0.])

np.zeros((5,), dtype=int)
array([0, 0, 0, 0, 0])

np.zeros((2, 1))
array([[ 0.],
       [ 0.]])


s = (2,2)
np.zeros(s, dtype=int)
array([[0, 0],
       [0, 0]])


	numpy.ones
numpy.ones(shape, dtype=None, order='C', *, like=None)

np.ones((5,), dtype=int)
array([1, 1, 1, 1, 1])


s = (2,2)
np.ones(s)
array([[1.,  1.],
       [1.,  1.]])



	numpy.linspace
numpy.linspace(start, stop, num=50, endpoint=True, retstep=False, dtype=None, axis=0)

np.linspace(2.0, 3.0, num=5)
array([2.  , 2.25, 2.5 , 2.75, 3.  ])

np.linspace(2.0, 3.0, num=5, endpoint=False)
array([2. ,  2.2,  2.4,  2.6,  2.8])

np.linspace(2.0, 3.0, num=5, retstep=True)
(array([2.  ,  2.25,  2.5 ,  2.75,  3.  ]), 0.25)



	numpy.eye
numpy.eye(N, M=None, k=0, dtype=<class 'float'>, order='C', *, like=None)

Parameters
N : Number of rows in the output.

M: optional, Number of columns in the output.

k: optional, Index of the diagonal: 0 (the default) refers to the main diagonal, a positive value refers to an upper diagonal, and a negative value to a lower diagonal.

dtype: optional, Data-type of the returned array.

order{‘C’, ‘F’}: optional, Whether the output should be stored in row-major (C-style) or column-major (Fortran-style) order in memory.

np.eye(2, dtype=int)
array([[1, 0],
       [0, 1]])


np.eye(4, k=0)
array([[1., 0., 0., 0.],
       [0., 1., 0., 0.],
       [0., 0., 1., 0.],
       [0., 0., 0., 1.]])